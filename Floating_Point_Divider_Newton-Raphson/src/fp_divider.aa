$module [fpd] $in (n d: $float<8,23>) $out (q: $float<8,23>) $is
{
    d1 := ($slice ($bitcast ($uint<32>) d) 31 23)
    init_int := ((254 - d1) && $zero<23>)
    init_float := ($bitcast ($float<8,23>) init_int)

    $branchblock[loop] 
    {
        $merge $entry loopback
            $phi j := _f1.0000e+0 $on $entry next_j $on loopback
            $phi r := init_float $on $entry next_r $on loopback
            $phi count := $zero<4> $on $entry next_count $on loopback
        $endmerge
        
        $volatile next_count := (count + 1)

        next_r := (r * (_f2.0000e+0 - (d * r)))

        next_j := ($mux (r > next_r) (r - next_r) (next_r - r))

        $if (j > _f1.0000e-7) $then
            $if (count < 15) $then
                $place[loopback]
            $endif
        $endif

    }(r => r count => count)

    q := (n * r)
    $rreport(fpd quo n d q count)  
}
